* rest-services е архитектура = state = концептоален начин по-който можем да изградим 
комуникация между клиен и сървър и използва http
  - Client-server
  - localhost:3000 това е нашия си сървър на компютъра





* http protokola  = e nachin na formatirane na komunakicia = протокол за комуникиране
HTTP - текстов протокол за пренос на данни
Web-Server = компютър който седи и чака за някаква заявка



* API  =  Приложно-програмен интерфейс - Образно казано, приложно-програмният интерфейс 
предоставя един по-абстрактен и опростен план за разработчика на приложения, 
който би му спестил изучаването на няколко различни слоя от Операционната или 
софтуерната система зад интерфейса.
По този начин се достига ефективност и бързина при адаптирането на нови 




* Encoding = e nachin po koito sa formatirani baitovete v edin file





* URL = там се достъпват ресурсите
				
-----------------------------------------------AJAX-----------------------------------------------
Какво е AJAX - асинхронен JavaScript / асинхронен начин да прехвърляме текстови данни
AJAX с него правим http request-i през JavaScript

паршел рендеринг - взима се html-a готов

----------------------------------------------- Fetch -----------------------------------------------
Fetch връща response/promise


----------------------------------------------- Promise -----------------------------------------------
JS Applications - Asynchronous Programming - март 2019 - William Abboud
https://www.youtube.com/watch?v=pO54dCLmljQ

Всеки асинхронен код се изпълнява чак когато свеки синхронен код приключи

callbacks e стария вариант, promise и async/await  е новото

В JS асинхронното програмиране е базирано на callbacks
Най често се използват за да вземем някакви данни от сървър

Promise е object - има 3-стадия които може да бъде - Pending/ Fullfile/ Failed
							
somePromise
	.then(() => {    then e method, a другото е callback

	})	


----------------------------------------------- NodeJS -----------------------------------------------
Express е пакет на NodeJS - той е боблиотека която ни позволява да си направим сървър
Сървъра взима всичко което му зададем след localhost:3000/....




----------------------------------------------- CORS -----------------------------------------------

Cross-Origin Resorce Sharing
Cors пази потребителите от атаки

----------------------------------------------- Undefined vs Null -----------------------------------------------
и двете представляват празна стойност


-----------------------------------------------  Objects ------------------------------------------------------
Object.create - създава празен object и неговия prototype ще е това което сме му подали
всеки обект си има prototype - __PROTO__
super - се използва когато искаме да вземем нещо от parent-a
hasOwnProperty - проверява текущия obect за някакво property

----------------------------------------------- Classes -----------------------------------------------
Abstract class - използва се само за наследяване

01. - Функциите на самия class се закачат на prototyp-a отдолу

Самият Class е един шаблон

class Teacher extends Person {  extends - закача функциите
  constructor(firstName, lastName, email, subject){
    super(firstName, lastName, email);  super - закача нужните пропъртита - вика constructor-a на Person
    this.subject = subject;
  };



----------------------------------------------- THIS -----------------------------------------------
	01 - зависи от къде го извикваме  - invocation
	02 - и начина по-който го извикваме - execution
								5-начина
							01 - event-hander - this-a e към елемента на който сме кликнали
							02 - Kогато е във функция -  global в node.js и window когато е в browser-a
							03 - Object - сочи към самия object
							04 - Call/Apply - сменяме контекста - подаваме какъв да ни е this-a
							05 - Bind - създава нова function и я връща като резултат

----------------------------------------------- Function ------------------------------------------------------
https://softuni.bg/trainings/2248/js-advanced-february-2019/internal#lesson-10570
https://www.youtube.com/watch?v=DlReXNJAbp4

Funtions - има само prototype a ne __PROTO__

Functions - are first-class objects
Immutable - тази стойност не може да бъде презаписана
CallBack - свършва работа и вика func
void - са функции които не връщат резултат
Arrow-functions - те си запазват this-a

Типовете данни са общо 7 ->	01. - Boolean      
				02. - Null
				03. - Undefined
				04. - Number
				05. - String
				06. - Symbol
				07. - Objects

			


Примитивни данни в JS -> 	01. - string
				02. - number
				03. - boolean
				04. - undefined
				05. - null


				

* Closure - тази функционалност въпреки че е извикала само веднъж, вътрещните и функции продължават да имат достъп до горния скоуп

* променливите които ползваме в програмирането се делят на две карегории 
		1. - тези които се подават по стойност(Value Types) - number, string boolean, null, undefined ->  копират стойността -> имат различни адреси в паметта
		2. - тези които се подават по референция(Reference) - Array, Objects, Func -> сочат към един и същ адрес в паметта


Stack - парчето памет което винаги варира и е ограничено се нарича - steck -> там се запазват функциите
Heap - е парче много по-голямо от Stack-a - в него се пазят адреси за обекти -> там са array, object i t.n.

arguments - ползваме го за да вземем всички параметри на функцията, независимо колко са на брой.

Destructuring [...arr] -> заделясе ново парче памет в паметта

Има 3-ри различни начина да декларираме една функция - hoisting, expression, arrow

Higher-Order Functions - приемат func като аргумент или връщат func като резултат от своето действие = setTimeOut/map/filter/reduce/forEach ....




IIFE - функция която в момента в който се декларира се изпълнява нейното съдържание - енкапулация

Patterns - шаблони

има 4-ри контекста които може да се изпълни една фънкция
 - глобален скоуп
 - метод скоуп - сочи към обекта
 - евент скоуп който сочи към дом елемента
 - и нашия скоуп който го определяме с call/apply/bind


statement - твърдение
function myFunc(word){
	console.log('something ' + word)
}


Curryng  - идеята е да се вземе една Function която приема много параметри и да я разбием на поредица от функции които приемат само един параметър.

						Arrow Functions



				
----------------------------------------------- Променливи ------------------------------------------------------

const - несе променя
var - function scope - глобална тя се хоиства
let - block scope - локална от 2015 ES6

----------------------------------------------- "==" vs "===" ------------------------------------------------------
"==" compares value only
"==" compares value and type

----------------------------------------------- HTML/CSS ------------------------------------------------------

https://lukyvj.github.io/family.scss/

difference between inline and inline-block   - на inline-block можем да му даваме padding and margin

vw/vh всеедно използваме проценти но те се взимат от view porta    video - https://www.youtube.com/watch?time_continue=3284&v=T3dUVbVpeXs 55min
% - са за parent-a

padding с %-ти винаги се отнася към width на parent елемента



HTML - текстов документ - език за маркиране с който можем да създаваме и визоализираме web съдържание
CSS - текстов документ
 - margin - отстояние
FLOAT - примерно картинка и около нея да има текст

FLEXBOX CONTAINERS PROPERTIES

 - display: fleks;
 - flex-directions: row | row-reverse| column | column-reverse 
 - flex-wrap: row wrap | wrap | wrap-reverse
 - flex-flow: flex-direction | flex-wrap
 - justify-content: fleks-start | flex-end | center | space-between | space-around | space-evenly
	как се алайват елементите по хоризонтала
 - align-items: flex-start | flex-end | center | baseline | strech
	по вертикала	
 - align-content: flex-start | flex-end | center | space-between | space-between | strech
 	за самото съдържание
 

	ITEMS PROPERTIES
 - order: <integer> както си искаме може да ги пренареждаме
 - flex-grow: <number> - задаване на място
 - flex-shrink: <number> - ако се наложи може да се смалява
 - flex-basis: <number> - основния размер
 - flex-none | flex-grow flex-shrink | flex-basis
 - align-self: auto | flex-start | flex-end | center | baseline | stretch


TYPOGRAPHY - техниката с която се подрежда някакъв писмен език.

margin-bottom - отстояние отдолу на текста
line-height - отстоянието между редовете
font-family - група от шрифтове
1em - е същото да кажем 100% от parenta -> лекция - https://www.youtube.com/watch?time_continue=1321&v=S8Zfo58QRAY
rem - 100% от root елемента				2:02:01 запис



----------------------------------------------- Inheritance ------------------------------------------------------
							NULL
						       OBJECT
			ВСИЧКО НАДОЛУ СА ОБЕКТИ КОИТО НАСЛЕДЯВАТ ПРОТОТИПА НА OBJECT
							

C#/Java -  работят с class
Javascript  - работи с prototype, ако в parent-a се промени нещо се променя и в нашия обект - референциите са живи

----------------------------------------------- Prototyp Chain ------------------------------------------------------

имаме достъп до ресурсите с които разполагат нашите прототипи















